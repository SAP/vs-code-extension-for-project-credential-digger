{
    "name": "vs-code-extension-for-project-credential-digger",
    "displayName": "VS Code extension for project \"Credential Digger\"",
    "description": "Runs credential digger scan",
    "version": "1.2.0",
    "icon": "resources/logo-CD.png",
    "keywords": [
        "Credential Digger",
        "SAP"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/SAP/vs-code-extension-for-project-credential-digger"
    },
    "publisher": "SAPOSS",
    "license": "Apache-2.0",
    "engines": {
        "vscode": "^1.76.0"
    },
    "pricing": "Free",
    "categories": [
        "Other"
    ],
    "activationEvents": [
        "onStartupFinished"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "vs-code-extension-for-project-credential-digger.credentialDiggerScan",
                "title": "Credential Digger: Scan"
            },
            {
                "command": "vs-code-extension-for-project-credential-digger.credentialDiggerAddRules",
                "title": "Credential Digger: Add Rules"
            }
        ],
        "configuration": {
            "id": "credentialDigger",
            "title": "Credential Digger",
            "required": [
                "credentialDigger.credentialDiggerRunner.type"
            ],
            "properties": {
                "credentialDigger.filterPattern": {
                    "type": "array",
                    "description": "Specifies the files to exclude from the scan",
                    "default": [],
                    "items": {
                        "type": "string"
                    }
                },
                "credentialDigger.rules": {
                    "type": "string",
                    "description": "Specifies the path to the rules file"
                },
                "credentialDigger.credentialDiggerRunner.type": {
                    "type": "string",
                    "description": "Specifies the Credential Digger runner mode",
                    "enum": [
                        "docker",
                        "webserver",
                        "binary"
                    ],
                    "enumDescriptions": [
                        "Specifies whether the Credential Digger is running on a Docker container",
                        "Specifies whether the Credential Digger is running on a Webserver",
                        "Specifies whether the Credential Digger is running as binary"
                    ]
                },
                "credentialDigger.credentialDiggerRunner.docker": {
                    "type": "object",
                    "description": "Specifies the configuration when the Credential Digger is running on a Docker container",
                    "properties": {
                        "containerId": {
                            "type": "string",
                            "description": "The container ID where the Credential Digger is running"
                        },
                        "databaseConfig": {
                            "type": "object",
                            "description": "Specifies the database used by the Credential Digger",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "default": "sqlite",
                                    "enum": [
                                        "sqlite",
                                        "postgres"
                                    ],
                                    "enumDescriptions": [
                                        "Specifies whether the Credential Digger is using SQLite DB",
                                        "Specifies whether the Credential Digger is using Postgres DB"
                                    ]
                                },
                                "sqlite": {
                                    "type": "object",
                                    "description": "Specifies the SQLite DB configuration",
                                    "properties": {
                                        "filename": {
                                            "type": "string",
                                            "description": "Specifies the SQLite DB file path"
                                        }
                                    }
                                },
                                "postgres": {
                                    "type": "object",
                                    "description": "Specifies the Postgres DB configuration",
                                    "properties": {
                                        "envFile": {
                                            "type": "string",
                                            "description": "Specifies the path to an environment file"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "credentialDigger.credentialDiggerRunner.binary": {
                    "type": "object",
                    "description": "Specifies the configuration when the Credential Digger is installed locally",
                    "properties": {
                        "path": {
                            "type": "string",
                            "description": "Specifies the Credential Digger full path"
                        },
                        "databaseConfig": {
                            "type": "object",
                            "description": "Specifies the database used by the Credential Digger",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "default": "sqlite",
                                    "enum": [
                                        "sqlite",
                                        "postgres"
                                    ],
                                    "enumDescriptions": [
                                        "Specifies whether the Credential Digger is using SQLite DB",
                                        "Specifies whether the Credential Digger is using Postgres DB"
                                    ]
                                },
                                "sqlite": {
                                    "type": "object",
                                    "description": "Specifies the SQLite DB configuration",
                                    "properties": {
                                        "filename": {
                                            "type": "string",
                                            "description": "Specifies the SQLite DB file path"
                                        }
                                    }
                                },
                                "postgres": {
                                    "type": "object",
                                    "description": "Specifies the Postgres DB configuration",
                                    "properties": {
                                        "envFile": {
                                            "type": "string",
                                            "description": "Specifies the path to an environment file"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "credentialDigger.credentialDiggerRunner.webserver": {
                    "type": "object",
                    "description": "Specifies the configuration when the Credential Digger is running on a Webserver",
                    "properties": {
                        "host": {
                            "type": "string",
                            "description": "Specifies the URL of the Credential Digger"
                        },
                        "envFile": {
                            "type": "string",
                            "description": "Specifies the path to an environment file"
                        },
                        "certificateValidation": {
                            "type": "boolean",
                            "default": true,
                            "description": "Specifies whether to validate the Credential Digger webserver certificate"
                        }
                    }
                }
            }
        }
    },
    "scripts": {
        "commit": "cz",
        "rimraf": "rimraf -I",
        "copyfiles": "copyfiles",
        "esbuild": "esbuild",
        "prepare": "husky install",
        "clean": "npm run rimraf -- node_modules .vscode-test out .nyc_output coverage mochawesome-report",
        "lint": "eslint src --ext ts",
        "lint:fix": "eslint src --ext ts --fix .",
        "format": "prettier --check .",
        "format:fix": "prettier --write",
        "esbuild:base": "npm run rimraf -- out && npm run esbuild -- ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node --external:deasync",
        "build": "npm run esbuild:base -- --sourcemap",
        "build:watch": "npm run esbuild:base -- --sourcemap --watch",
        "generate:release": "standard-version",
        "vscode:prepublish": "npm run -S esbuild:base -- --minify",
        "package": "vsce package --ignoreFile .vscodeignore",
        "publish": "vsce publish",
        "unpublish": "vsce unpublish",
        "copy:build-files": "npm run copyfiles -- package.json",
        "copy:test-files": "npm run copyfiles -- -f src/test/unit/data/* out/test/unit/data",
        "pretest": "npm run rimraf -- out .nyc_output coverage mochawesome-report && tsc -p ./ && npm run copy:test-files && npm run copy:build-files -- out",
        "test": "node ./out/test/runTest.js",
        "test:unit": "npm run pretest && node ./out/test/runTest.js unit",
        "test:integration": "npm run pretest && node ./out/test/runTest.js integration"
    },
    "devDependencies": {
        "@commitlint/cli": "18.4.1",
        "@commitlint/config-conventional": "17.6.5",
        "@faker-js/faker": "8.0.2",
        "@istanbuljs/nyc-config-typescript": "1.0.2",
        "@types/chai": "4.3.5",
        "@types/glob": "8.1.0",
        "@types/lodash": "4.14.195",
        "@types/mocha": "10.0.1",
        "@types/mochawesome": "6.2.1",
        "@types/node": "18.17.1",
        "@types/sinon": "10.0.15",
        "@types/tough-cookie": "4.0.2",
        "@types/vscode": "1.76.0",
        "@typescript-eslint/eslint-plugin": "5.60.0",
        "@typescript-eslint/parser": "5.53.0",
        "@vscode/test-electron": "2.3.4",
        "@vscode/vsce": "2.19.0",
        "chai": "4.3.8",
        "commitizen": "4.3.0",
        "copyfiles": "2.4.1",
        "cz-conventional-changelog": "3.3.0",
        "esbuild": "0.19.2",
        "eslint": "8.42.0",
        "eslint-config-prettier": "8.8.0",
        "eslint-plugin-import": "2.28.1",
        "glob": "10.3.3",
        "husky": "8.0.3",
        "lint-staged": "13.2.2",
        "mocha": "10.2.0",
        "mocha-explorer-launcher-scripts": "0.4.0",
        "mochawesome": "7.1.3",
        "mochawesome-report-generator": "6.2.0",
        "nyc": "15.1.0",
        "prettier": "2.8.8",
        "rimraf": "5.0.1",
        "sinon": "15.2.0",
        "source-map-support": "0.5.21",
        "standard-version": "9.5.0",
        "typescript": "5.0.4"
    },
    "dependencies": {
        "@vscode-logging/logger": "1.2.3",
        "axios": "1.5.0",
        "csv-parse": "5.4.0",
        "dotenv": "16.3.1",
        "form-data": "4.0.0",
        "http-cookie-agent": "5.0.4",
        "ignore": "5.2.4",
        "lodash": "4.17.21",
        "tough-cookie": "4.1.3"
    },
    "overrides": {
        "@typescript-eslint/typescript-estree": "^5.59.7"
    },
    "husky": {
        "hooks": {
            "pre-commit": "lint-staged"
        }
    },
    "lint-staged": {
        "*.ts": "npm run lint:fix",
        "*": "npm run format:fix"
    },
    "config": {
        "commitizen": {
            "path": "./node_modules/cz-conventional-changelog"
        }
    }
}
